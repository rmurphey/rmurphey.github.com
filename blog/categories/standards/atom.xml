<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: standards | Adventures in JavaScript Development]]></title>
  <link href="http://rmurphey.com/blog/categories/standards/atom.xml" rel="self"/>
  <link href="http://rmurphey.com/"/>
  <updated>2015-10-08T22:03:33-05:00</updated>
  <id>http://rmurphey.com/</id>
  <author>
    <name><![CDATA[Rebecca Murphey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using ems for font sizing in css]]></title>
    <link href="http://rmurphey.com/blog/2007/12/09/using-ems-for-font-sizing-in-css/"/>
    <updated>2007-12-09T00:00:00-06:00</updated>
    <id>http://rmurphey.com/blog/2007/12/09/using-ems-for-font-sizing-in-css</id>
    <content type="html"><![CDATA[<p>A List Apart had a great article recently on <a href="http://www.alistapart.com/articles/howtosizetextincss/">using 'em' for CSS font-size declarations</a>, which served as great back-up for some conversations I'd been having among coworkers. (It turns out that people who didn't have a former life in print don't necessarily understand what an em is: a self-referential unit of font size measurement, equal to the height of the capital letter M. Back in the typesetting days, it was a unit for measuring space, especially horizontal space, in the form of an "em dash" (rendered now as <code>&amp;mdash;</code>) or an "em space." There was also a sister unit, the "en.")</p>

<p>Anyway: I just came across <a href="http://benjaminsterling.com/using-em-for-font-size-learning-on-the-go/">this post</a>, by someone trying to put ems into practice; at the end, he gets into tools for doing conversions from pixels to ems, and it struck a surprising nerve with me.</p>

<p>Here's the thing: While I can see how pixel conversion seems useful when you first make the switch from px to em, I think the whole point of using ems instead of pixels is to embrace the concept that, on the web, sizes are relative, not absolute. If you're focused on matching an absolute size in a mockup by converting pixels to ems, the chances seem good that you're dealing with a layout that wasn't intended to work with relatively sized text to begin with, and/or that your ultimate product won't work if the user makes a different decision than you about how they will consume it.</p>

<p>If you receive a Photoshop mockup where body copy is 10px tall, I think it's a tremendous waste of time to measure that 10px and convert it to ems -- 10px on my 1024x768 monitor is a far cry from 10px on my 1600x1200 monitor, nevermind on the HDTV sitting across the room.</p>

<p>When you're designing and styling text for the web, better to:</p>

<ul>
<li>Assume from the start that users will consume your site differently than you do.</li>
<li>Make decisions in your design, CSS and HTML that will consistently convey the content and hierarchy of your site, regardless of how it is consumed.</li>
<li>Assume that the user knows better than you what a good base text size is for them.</li>
<li>Use a reset styleheet — I like <a href="http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/">Eric Meyer's CSS Reset Reloaded</a> — to set everything to that base size.</li>
<li>Vary the sizes of elements <em>relatively</em> using ems.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standards for HTML emails?]]></title>
    <link href="http://rmurphey.com/blog/2007/12/07/standards-for-html-emails/"/>
    <updated>2007-12-07T00:00:00-06:00</updated>
    <id>http://rmurphey.com/blog/2007/12/07/standards-for-html-emails</id>
    <content type="html"><![CDATA[<p>After a couple of attempts that ended not-so-well, I gave up on HTML emails. I advise people to work with someone who's an expert with them, or to at least <a href="http://www.campaignmonitor.com/resources/">use templates that are known to work</a>, and then I wish them well. At a job interview I actually proclaimed my active dislike of HTML emails and general unwillingness to muck with them -- I'm not sure that went over so well. The news that <a href="http://www.campaignmonitor.com/blog/archives/2007/01/microsoft_takes_email_design_b.html">Outlook 2007 actually took a giant leap backwards in HTML support</a> seals the deal for me. Still, it's good to read that <a href="http://www.456bereastreet.com/archive/200712/the_email_standards_project_launches/">some people are trying to bring some sanity to the situation</a>. I wish them luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My case for standards-based web layouts]]></title>
    <link href="http://rmurphey.com/blog/2007/12/03/my-case-for-standards-based-web-layouts/"/>
    <updated>2007-12-03T00:00:00-06:00</updated>
    <id>http://rmurphey.com/blog/2007/12/03/my-case-for-standards-based-web-layouts</id>
    <content type="html"><![CDATA[<p>Since 1999, the World Wide Web Consortium (W3C) -- a standards body that tells the world how the web should work -- has urged web sites to use semantic markup for content and cascading stylesheets (CSS) for layout, and to abandon code that combines information and presentation in non-semantic HTML table-based layouts. Semantic markup ...</p>

<ul>
<li>puts the most important information in a document at the beginning of the document;</li>
<li>clearly marks headings, paragraphs, lists and other standard elements; and </li>
<li>in general indicates what something is, not what it looks like.</li>
</ul>


<p>It’s this separation of information from presentation that helps Google figure out what a page is about; that lets users make decisions about how they interact with content; that allows content to be reused in ways we didn’t think about when it was first created; that lets us change the look and feel of a whole site by editing a file or two; and that lets us take a site built for a PC-based browser and squeeze it onto an iPhone.</p>

<p>All those advantages aside, at the end of the day, just because the W3C says it should be so doesn’t make it so. Plenty of sites haven’t managed to let go of late-1900s practices, and for understandable reasons: There’s a non-trivial learning curve for designers and developers who grew up slicing and dicing layouts into HTML tables, and good semantic markup and CSS takes careful planning at the outset of a project. Combine those challenges with the fact that a dynamic site’s front-end code can be brutally intertwined with back-end processes, and it can be difficult for a company to justify transitioning away from a system that seems to be working just fine.</p>

<p>However, a few factors are tipping the balance in the W3C’s favor these days:</p>

<ul>
<li>
<strong>Search engines like pages they can read</strong>, and semantic markup using HTML provides a language search engines can understand. Mark an element as a Level 1 Heading, and search engines will know it’s the most important heading on the page and use that information to figure out what your page is about. Simply using semantic markup can contribute greatly to a site’s search engine optimization.</li>
<li>
<strong>Accessibility has come to the forefront of the web development world</strong> with the certification of <a href="http://www.456bereastreet.com/archive/200710/update_on_the_target_accessibility_lawsuit/">a class-action lawsuit against Target</a> department stores. The suit says that Target has refused to take steps to make the site usable by people who are visually impaired. As a result of a ruling in the lawsuit, <a href="http://www.techcrunch.com/2007/10/13/websites-may-require-visually-impaired-access-in-california/">California may mandate that sites be accessible to the visually impaired</a>. While sites that use table-based layouts aren’t inaccessible by definition, they are inherently more difficult to make accessible than sites that separate their information from their presentation.</li>
<li>
<strong>The Web 2.0 phenomenon relies on content that can be rearranged and reused with ease</strong>, and that rearranging and reuse is infinitely easier on sites that separate information from presentation. Web 2.0 technologies rearrange, reuse and repopulate elements on a page based on what the elements are, not on what they look like or where they are on the page. As users come to expect more interactivity and fewer page loads from their web experience, sites that separate their information from presentation will be in a better position to make use of Web 2.0 technologies.</li>
<li>The mobile web has existed for several years now, but <strong><a href="http://www.alistapart.com/articles/putyourcontentinmypocket">the iPhone is reshaping the mobile web landscape</a></strong> and blurring the line between PCs and portable devices. Though the iPhone can browse “normal” web sites, many content providers are offering sites that are HTML-based but customized for the shape and size of the iPhone’s screen. As more portable devices that can browse the “normal” web become available, sites that separate content from presentation will be uniquely positioned to offer mobile users a customized version of their existing pages without having to change the underlying code.</li>
</ul>


<p>Further reading:</p>

<ul>
<li>
<a href="http://www.456bereastreet.com/archive/200711/posh_plain_old_semantic_html/">POSH - Plain Old Semantic HTML</a> on 456 Berea Street</li>
<li>
<a href="http://www.hotdesign.com/seybold/everything.html">Why Tables for Layout is Stupid</a> from Seybold 2003 (!)</li>
<li><a href="http://www.w3.org/Style/CSS/">The W3C on CSS</a></li>
<li>
<a href="http://csszengarden.com/">CSS Zen Garden</a>, the site that leads many developers down the path to standards</li>
<li>
<a href="http://www.alistapart.com">A List Apart</a> offers excellent articles on standards-based web development</li>
</ul>

]]></content>
  </entry>
  
</feed>
