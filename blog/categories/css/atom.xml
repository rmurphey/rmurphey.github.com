<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | Adventures in JavaScript Development]]></title>
  <link href="http://rmurphey.com/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://rmurphey.com/"/>
  <updated>2015-10-08T22:03:33-05:00</updated>
  <id>http://rmurphey.com/</id>
  <author>
    <name><![CDATA[Rebecca Murphey]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Skipping Photoshop for web design]]></title>
    <link href="http://rmurphey.com/blog/2008/06/06/skipping-photoshop-for-web-design/"/>
    <updated>2008-06-06T00:00:00-05:00</updated>
    <id>http://rmurphey.com/blog/2008/06/06/skipping-photoshop-for-web-design</id>
    <content type="html"><![CDATA[<p>Occasionally the folks at 37signals write a blog post that seems to channel thoughts that I've just never put to paper [blog]. This week they did it twice, with <a href="http://www.37signals.com/svn/posts/1061-why-we-skip-photoshop">two</a> <a href="http://www.37signals.com/svn/posts/1066-web-designers-should-do-their-own-htmlcss">posts</a> about how they prefer to skip Photoshop and work with HTML and CSS when it comes to designing a web site.</p>

<p>I've found it incredibly pleasant to work with designers who have demonstrated knowledge and skill when it comes to CSS and HTML -- at my last job, our lead designer was also the guy you went to if you were stumped by a CSS issue. Knowing the tools means that production considerations become an active part of the design process: you don't create an element without giving some thought to how it will be built. In the best of worlds, you weigh the cost of building the element -- in time, in HTTP requests, in excessive markup -- against the benefit of having it on the site, and make educated decisions about what is "worth it."</p>

<p>I've never found Photoshop to be an adequate tool for mocking up a design -- it just doesn't "think" the way the web does, it just doesn't observe the constraints that the web imposes, and it just doesn't make accessible the parts of CSS that are truly powerful.</p>

<p>While I am no designer, I play one sometimes for freelance clients. When I haven't wanted to go straight to code, I've found that another Adobe product, InDesign, can be incredibly powerful. It's an application intended for print layout (and some of its related assumptions can be a little frustrating, such as its lack of a hex-based color picker/setter), but generally it is exponentially closer to the realities of the web than Photoshop. It thinks in boxes, not pixels, and offers paragraph-, character- and object-level stylesheets that can ... cascade! Just like with CSS, you can rapidly and dramatically alter the appearance of a page once you establish the base, semantic elements of it. It steers you to think about a page's structure, not just its presentation.</p>

<p>I'm hoping that the number of web designers who think that Photoshop is a sufficient tool will dwindle, but I'm not sure what the route is to get to that point. Photoshop's inadequacy in this regard is so clear to me -- and to people like the 37signals folks -- that I'm not sure how you persuade someone who still believes otherwise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I learned CSS]]></title>
    <link href="http://rmurphey.com/blog/2007/12/24/how-i-learned-css/"/>
    <updated>2007-12-24T00:00:00-06:00</updated>
    <id>http://rmurphey.com/blog/2007/12/24/how-i-learned-css</id>
    <content type="html"><![CDATA[<p>I remember when I first tried to understand how to produce designs for the web -- coming from the paper-based world, it was hard for me to accept everything that was suddenly out of my control. When I first tried to grasp CSS with the help of now-defunct Adobe GoLive, I bailed pretty quickly. Table-based layout and font tags didn't make much sense to me either -- why did I have to slice up a page into a bunch of adjoining cells, instead of just drawing independent boxes like I did in Quark?</p>

<p>A couple of years later, I decided to try again, motivated by the realization that my <a href="http://gmurphey.com/">eight-years-younger brother</a> seemed to be better at this web stuff than I was. I spent untold hours trying to wrap my brain around <a href="http://www.sustainablewebdesign.com/resources/601/">the difference between margin and padding</a> and exactly how to <a href="http://css.maxdesign.com.au/floatutorial/">get floated elements to bend to my will</a>. I remember the epiphany that one could <a href="http://www.sovavsiti.cz/css/horizontal_menu.html">use left-floated list items for a horizontal menu</a>, or that <a href="http://www.netmechanic.com/news/vol4/html_no22.htm">the right DOCTYPE can force Internet explorer to behave more like a real browser</a>.</p>

<p>These days, I have an honest-to-god job doing this stuff, and every now and then, someone will ask me how they can learn it too. It all makes so much more sense to me than it used to that it's hard to remember how I got here. In the interest of getting this stuff written down for passing along, though, here are a few thoughts:</p>

<h3>The Tools</h3>


<p>These are things without which the rest is impossible:</p>

<ul>
<li>
<strong>A text editor</strong> Notepad will do just fine; for a few bucks, you can get <a href="http://macromates.com/">TextMate</a> for Mac or the <a href="http://www.e-texteditor.com/">e Text Editor</a> for PC. If you use Dreamweaver, hide everything but the file navigator panel and the code editing view. <em>You will learn nothing from Dreamweaver's "design" view.</em>
</li>
<li>
<strong><a href="http://www.mozilla.com/en-US/firefox/">Firefox</a></strong> You'll need to test anything you do in Internet Explorer, but first, you'll get it working in Firefox. Whereas Internet Explorer enjoys mocking web standards, Firefox does its best to adhere to them; plus, it has all sorts of extensions that make it easier to troubleshoot your work.</li>
<li>
<strong><a href="https://addons.mozilla.org/en-US/firefox/addon/60">Firefox Web Developer Toolbar</a></strong> This has all sorts of useful tools in it, including a real-time CSS editor that opens in the browser's sidebar so you try changes to your CSS and see the results immediately.</li>
<li>
<strong><a href="https://addons.mozilla.org/en-US/firefox/addon/1843">Firebug</a></strong> This is most useful for Javascript debugging, but it has some nice features for debugging CSS as well.</li>
<li>
<strong><a href="http://users.skynet.be/mgueury/mozilla/">HTML Validator</a></strong> Incredibly helpful for finding errors in your HTML.</li>
</ul>


<p>(An aside: A few months ago I booted up an old laptop and found a preview release of Firefox 1.0 installed beside a well-worn Internet Explorer 6; when I abandoned the laptop, I was in the process of abandoning IE too. I can't help but wonder how difficult my learning would have continued to be without the arrival of Firefox, which, with the extensions mentioned above, makes it so much more possible to learn all of this stuff in a very tangible, immediate sort of way.)</p>

<h3>Learning with Firefox</h3>


<p>Once you have the tools above, open Firefox and start with a page someone else built -- like the one you're on right now -- and see what's inside. It pays to be curious about every web page you visit; if you see something interesting, view the source and figure out how it got there. Some tips:</p>

<ul>
<li>
<code>Ctrl-U</code> will show you the HTML for a page, and with the HTML Validator extension, you can "clean up" the HTML so it's easier to read.</li>
<li>
<code>Ctrl-Shift-E</code> will open the Web Developer Toolbar CSS editor, which will show you the CSS for the page, with a tab for each CSS file. You can edit the CSS in the editor and see the effects immediately.</li>
<li>
<code>F12</code> will open Firebug. In the top left of the panel that opens, click the Inspect menu item, then move your mouse back to the page itself and click on an element to find out more about it. You can also click on the HTML tab to view the HTML and expand and collapse sections of it to see the structure of the page. Hovering over an element in the HTML panel will highlight it on the page; clicking on an element will let you find out more about it in the Style and Layout tabs of Firebug. (Firebug is an incredibly powerful tool that you really need to play with to fully appreciate. It's a completely non-destructive tool -- you can't hurt anything with it unless you try really, really hard -- so don't be afraid to click around and see what happens.)</li>
<li>Remember that these days, lots of page elements are built with Javascript rather than with straight HTML. <code>Ctrl-U</code> will show you only the HTML; Firebug will show you the "generated source," including any elements built with Javascript. Firebug also lets you look at the Javascript on a page, which can be helpful when you're trying to understand how something got there.
</li>
</ul>




<h3>POSH</h3>


<p><a href="http://www.456bereastreet.com/archive/200711/posh_plain_old_semantic_html/">Plain-old semantic HTML</a>. When you go to make a web page, write the simplest HTML you can, and use standard HTML elements whenever humanly possible. Start by creating HTML that represents the actual sections of the page -- header, navigation, sidebar, content, footer -- and give the elements names that say what they <em>are</em>, not where they go. When you think you're done, view the HTML in a browser, without CSS, and see if it makes sense. Then, <em>and only then</em>, open the browser's CSS editor and start styling the elements. See how far you can get without adding any design-related markup to your HTML. If you find yourself writing convoluted HTML or adding purely presentational markup, to make something work, it's time to reconsider your approach. Once you have a good stylesheet started, copy it to your text editor and continue working on it there.</p>

<h3>Strategies</h3>


<p>It helps to give yourself deadlines, even if they're imaginary. I've learned more about HTML, CSS and Javascript in the past 12 months than I learned in the three years before, and I think that's largely because deadlines have forced me to solve problems rather than pondering them.</p>

<p>Don't be afraid to do something less than perfectly; there can be value in just getting it done. I constantly look back at things I did three months ago -- let alone three years ago, and sometimes three weeks ago -- and I cringe when I think how differently I would do them today. But half the reason I know what I know now is precisely because I <em>didn't</em> know it then, and I learned it along the way. Understanding the building blocks of the web is an iterative process, and you'll do better if you remember that <strong>you cannot know everything you wish you knew</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ems for font sizing in css]]></title>
    <link href="http://rmurphey.com/blog/2007/12/09/using-ems-for-font-sizing-in-css/"/>
    <updated>2007-12-09T00:00:00-06:00</updated>
    <id>http://rmurphey.com/blog/2007/12/09/using-ems-for-font-sizing-in-css</id>
    <content type="html"><![CDATA[<p>A List Apart had a great article recently on <a href="http://www.alistapart.com/articles/howtosizetextincss/">using 'em' for CSS font-size declarations</a>, which served as great back-up for some conversations I'd been having among coworkers. (It turns out that people who didn't have a former life in print don't necessarily understand what an em is: a self-referential unit of font size measurement, equal to the height of the capital letter M. Back in the typesetting days, it was a unit for measuring space, especially horizontal space, in the form of an "em dash" (rendered now as <code>&amp;mdash;</code>) or an "em space." There was also a sister unit, the "en.")</p>

<p>Anyway: I just came across <a href="http://benjaminsterling.com/using-em-for-font-size-learning-on-the-go/">this post</a>, by someone trying to put ems into practice; at the end, he gets into tools for doing conversions from pixels to ems, and it struck a surprising nerve with me.</p>

<p>Here's the thing: While I can see how pixel conversion seems useful when you first make the switch from px to em, I think the whole point of using ems instead of pixels is to embrace the concept that, on the web, sizes are relative, not absolute. If you're focused on matching an absolute size in a mockup by converting pixels to ems, the chances seem good that you're dealing with a layout that wasn't intended to work with relatively sized text to begin with, and/or that your ultimate product won't work if the user makes a different decision than you about how they will consume it.</p>

<p>If you receive a Photoshop mockup where body copy is 10px tall, I think it's a tremendous waste of time to measure that 10px and convert it to ems -- 10px on my 1024x768 monitor is a far cry from 10px on my 1600x1200 monitor, nevermind on the HDTV sitting across the room.</p>

<p>When you're designing and styling text for the web, better to:</p>

<ul>
<li>Assume from the start that users will consume your site differently than you do.</li>
<li>Make decisions in your design, CSS and HTML that will consistently convey the content and hierarchy of your site, regardless of how it is consumed.</li>
<li>Assume that the user knows better than you what a good base text size is for them.</li>
<li>Use a reset styleheet — I like <a href="http://meyerweb.com/eric/thoughts/2007/05/01/reset-reloaded/">Eric Meyer's CSS Reset Reloaded</a> — to set everything to that base size.</li>
<li>Vary the sizes of elements <em>relatively</em> using ems.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standards for HTML emails?]]></title>
    <link href="http://rmurphey.com/blog/2007/12/07/standards-for-html-emails/"/>
    <updated>2007-12-07T00:00:00-06:00</updated>
    <id>http://rmurphey.com/blog/2007/12/07/standards-for-html-emails</id>
    <content type="html"><![CDATA[<p>After a couple of attempts that ended not-so-well, I gave up on HTML emails. I advise people to work with someone who's an expert with them, or to at least <a href="http://www.campaignmonitor.com/resources/">use templates that are known to work</a>, and then I wish them well. At a job interview I actually proclaimed my active dislike of HTML emails and general unwillingness to muck with them -- I'm not sure that went over so well. The news that <a href="http://www.campaignmonitor.com/blog/archives/2007/01/microsoft_takes_email_design_b.html">Outlook 2007 actually took a giant leap backwards in HTML support</a> seals the deal for me. Still, it's good to read that <a href="http://www.456bereastreet.com/archive/200712/the_email_standards_project_launches/">some people are trying to bring some sanity to the situation</a>. I wish them luck.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My case for standards-based web layouts]]></title>
    <link href="http://rmurphey.com/blog/2007/12/03/my-case-for-standards-based-web-layouts/"/>
    <updated>2007-12-03T00:00:00-06:00</updated>
    <id>http://rmurphey.com/blog/2007/12/03/my-case-for-standards-based-web-layouts</id>
    <content type="html"><![CDATA[<p>Since 1999, the World Wide Web Consortium (W3C) -- a standards body that tells the world how the web should work -- has urged web sites to use semantic markup for content and cascading stylesheets (CSS) for layout, and to abandon code that combines information and presentation in non-semantic HTML table-based layouts. Semantic markup ...</p>

<ul>
<li>puts the most important information in a document at the beginning of the document;</li>
<li>clearly marks headings, paragraphs, lists and other standard elements; and </li>
<li>in general indicates what something is, not what it looks like.</li>
</ul>


<p>It’s this separation of information from presentation that helps Google figure out what a page is about; that lets users make decisions about how they interact with content; that allows content to be reused in ways we didn’t think about when it was first created; that lets us change the look and feel of a whole site by editing a file or two; and that lets us take a site built for a PC-based browser and squeeze it onto an iPhone.</p>

<p>All those advantages aside, at the end of the day, just because the W3C says it should be so doesn’t make it so. Plenty of sites haven’t managed to let go of late-1900s practices, and for understandable reasons: There’s a non-trivial learning curve for designers and developers who grew up slicing and dicing layouts into HTML tables, and good semantic markup and CSS takes careful planning at the outset of a project. Combine those challenges with the fact that a dynamic site’s front-end code can be brutally intertwined with back-end processes, and it can be difficult for a company to justify transitioning away from a system that seems to be working just fine.</p>

<p>However, a few factors are tipping the balance in the W3C’s favor these days:</p>

<ul>
<li>
<strong>Search engines like pages they can read</strong>, and semantic markup using HTML provides a language search engines can understand. Mark an element as a Level 1 Heading, and search engines will know it’s the most important heading on the page and use that information to figure out what your page is about. Simply using semantic markup can contribute greatly to a site’s search engine optimization.</li>
<li>
<strong>Accessibility has come to the forefront of the web development world</strong> with the certification of <a href="http://www.456bereastreet.com/archive/200710/update_on_the_target_accessibility_lawsuit/">a class-action lawsuit against Target</a> department stores. The suit says that Target has refused to take steps to make the site usable by people who are visually impaired. As a result of a ruling in the lawsuit, <a href="http://www.techcrunch.com/2007/10/13/websites-may-require-visually-impaired-access-in-california/">California may mandate that sites be accessible to the visually impaired</a>. While sites that use table-based layouts aren’t inaccessible by definition, they are inherently more difficult to make accessible than sites that separate their information from their presentation.</li>
<li>
<strong>The Web 2.0 phenomenon relies on content that can be rearranged and reused with ease</strong>, and that rearranging and reuse is infinitely easier on sites that separate information from presentation. Web 2.0 technologies rearrange, reuse and repopulate elements on a page based on what the elements are, not on what they look like or where they are on the page. As users come to expect more interactivity and fewer page loads from their web experience, sites that separate their information from presentation will be in a better position to make use of Web 2.0 technologies.</li>
<li>The mobile web has existed for several years now, but <strong><a href="http://www.alistapart.com/articles/putyourcontentinmypocket">the iPhone is reshaping the mobile web landscape</a></strong> and blurring the line between PCs and portable devices. Though the iPhone can browse “normal” web sites, many content providers are offering sites that are HTML-based but customized for the shape and size of the iPhone’s screen. As more portable devices that can browse the “normal” web become available, sites that separate content from presentation will be uniquely positioned to offer mobile users a customized version of their existing pages without having to change the underlying code.</li>
</ul>


<p>Further reading:</p>

<ul>
<li>
<a href="http://www.456bereastreet.com/archive/200711/posh_plain_old_semantic_html/">POSH - Plain Old Semantic HTML</a> on 456 Berea Street</li>
<li>
<a href="http://www.hotdesign.com/seybold/everything.html">Why Tables for Layout is Stupid</a> from Seybold 2003 (!)</li>
<li><a href="http://www.w3.org/Style/CSS/">The W3C on CSS</a></li>
<li>
<a href="http://csszengarden.com/">CSS Zen Garden</a>, the site that leads many developers down the path to standards</li>
<li>
<a href="http://www.alistapart.com">A List Apart</a> offers excellent articles on standards-based web development</li>
</ul>

]]></content>
  </entry>
  
</feed>
